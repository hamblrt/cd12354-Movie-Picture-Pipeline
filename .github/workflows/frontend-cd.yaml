name: Movie Picture Frontend CD

on:
  # Allow Manual triggering of frontend CD
  workflow_dispatch:
  
  # Any push to main branch in frontend folders
  push:
  #  branches:
  #    - 'main'
  #  paths:
  #    - 'frontend/**'

# Environment variable
env:
  NODE_VERSION: 'latest'
  REACT_APP_MOVIE_API_URL: 'http://localhost:5000'
  ECR_REPO: '991474059648.dkr.ecr.us-east-1.amazonaws.com/user3577726/frontend'

jobs:
  frontend-lint:
    runs-on: ubuntu-latest
    steps:
    - name: Check out repository
      uses: actions/checkout@v3
    - name: Setup Node.js version from environment
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
    - name: Cache node modules forr frontend lint
      id: cache-npm
      uses: actions/cache@v3
      env:
        cache-name: cache-node-modules
      with:
        path: ~/.npm
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-
    - name: Install Node dependencies
      run: cd frontend &&  npm ci
    - name: Run frontend linter
      run: cd frontend && npm run lint    

  frontend-test:
    runs-on: ubuntu-latest
    steps:
    - name: Check out repository
      uses: actions/checkout@v3
    - name: Setup Node.js version from environment
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
    - name: Cache node modules for frontend test
      id: cache-npm
      uses: actions/cache@v3
      env:
        cache-name: cache-node-modules
      with:
        path: ~/.npm
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-
    - name: Install Node dependencies
      run: cd frontend &&  npm ci
    - name: Run frontend tests
      run: cd frontend && npm test   

  frontend-build-push:
    needs: [frontend-lint, frontend-test]
    runs-on: ubuntu-latest
    steps:
    - name: Check out repository
      uses: actions/checkout@v3
    # Setup AWS credentials from GitHub secrets      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: 'us-east-1'
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    - name: Build, tag, and push docker image to Amazon ECR
      run: |
        cd frontend
        docker build --build-arg=REACT_APP_MOVIE_API_URL=$REACT_APP_MOVIE_API_URL --tag=$ECR_REPO:$GITHUB_SHA .    
        docker push $ECR_REPO:$GITHUB_SHA
  
  frontend-deploy:
    needs: frontend-build-push
    runs-on: ubuntu-latest
    steps:
    - name: Check out repository
      uses: actions/checkout@v3
    # Setup AWS credentials from GitHub secrets 
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: 'us-east-1'
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    # Update kubeconfig with EKS cluster details
    - name: Set up kubectl config
      run: aws eks update-kubeconfig --name user3577726-project-cluster --region us-east-1
    # Apply kustomize image patch and deploy frontend to kubernetes
    - name: Deploy to EKS cluster
      run : |
        cd frontend/k8s
        kustomize edit set image frontend=$ECR_REPO:$GITHUB_SHA
        kustomize build | kubectl apply -k .
